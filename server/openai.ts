import OpenAI from "openai";

// the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export interface BusinessKnowledge {
  companyName: string;
  businessType: string;
  specialties: string[];
  commonProducts: string[];
  workingHours: string;
  policies: string[];
  promotions: string[];
}

export interface ChatContext {
  customerName?: string;
  conversationHistory: Array<{
    role: 'user' | 'assistant';
    content: string;
    timestamp: Date;
  }>;
  currentProducts?: any[];
  customerPreferences?: string[];
}

export class AIBotService {
  private businessKnowledge: BusinessKnowledge;

  constructor(businessKnowledge?: BusinessKnowledge) {
    this.businessKnowledge = businessKnowledge || {
      companyName: "AutoPe√ßas Brasil",
      businessType: "Distribuidora de autope√ßas",
      specialties: ["Pe√ßas originais", "Pe√ßas nacionais", "Filtros", "√ìleos", "Pneus", "Baterias"],
      commonProducts: ["Filtro de √≥leo", "Pastilha de freio", "Amortecedor", "Correia dentada", "Vela de igni√ß√£o"],
      workingHours: "Segunda a Sexta: 8h √†s 18h, S√°bado: 8h √†s 12h",
      policies: [
        "Garantia de 90 dias em pe√ßas nacionais",
        "Garantia de 1 ano em pe√ßas originais",
        "Entrega gr√°tis para pedidos acima de R$ 200",
        "Troca garantida em caso de pe√ßa errada"
      ],
      promotions: [],
    };
  }

  updateBusinessKnowledge(knowledge: Partial<BusinessKnowledge>) {
    this.businessKnowledge = { ...this.businessKnowledge, ...knowledge };
  }

  private buildSystemPrompt(): string {
    return `Voc√™ √© um assistente especializado em autope√ßas da ${this.businessKnowledge.companyName}, uma ${this.businessKnowledge.businessType}.

INFORMA√á√ïES SOBRE A EMPRESA:
- Especialidades: ${this.businessKnowledge.specialties.join(", ")}
- Produtos mais comuns: ${this.businessKnowledge.commonProducts.join(", ")}
- Hor√°rio de funcionamento: ${this.businessKnowledge.workingHours}
- Pol√≠ticas: ${this.businessKnowledge.policies.join(" | ")}
${this.businessKnowledge.promotions.length > 0 ? `- Promo√ß√µes ativas: ${this.businessKnowledge.promotions.join(" | ")}` : ""}

INSTRU√á√ïES:
1. Seja sempre cordial, profissional e prestativo
2. Use linguagem brasileira natural e acess√≠vel
3. Ajude com identifica√ß√£o de pe√ßas, compatibilidade, pre√ßos e pedidos
4. Sempre pergunte sobre o ve√≠culo (marca, modelo, ano) para dar recomenda√ß√µes precisas
5. Ofere√ßa alternativas quando a pe√ßa procurada n√£o estiver dispon√≠vel
6. Mencione garantias e pol√≠ticas quando relevante
7. Se n√£o souber algo espec√≠fico, seja honesto e ofere√ßa transferir para um vendedor humano
8. Para pedidos, colete: pe√ßa desejada, quantidade, dados do ve√≠culo, endere√ßo de entrega
9. Seja proativo em sugerir pe√ßas relacionadas (kit completo, por exemplo)
10. Use emojis brasileiros ocasionalmente para ser mais amig√°vel üöó

Responda sempre de forma √∫til e focada no atendimento ao cliente de autope√ßas.`;
  }

  async generateResponse(
    userMessage: string,
    context: ChatContext,
    availableProducts?: any[]
  ): Promise<string> {
    try {
      const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
        {
          role: "system",
          content: this.buildSystemPrompt()
        }
      ];

      // Adicionar contexto de produtos dispon√≠veis se fornecido
      if (availableProducts && availableProducts.length > 0) {
        const productsContext = `PRODUTOS DISPON√çVEIS EM ESTOQUE:
${availableProducts.map(p => `- ${p.name} (${p.brand}) - R$ ${p.price} - Estoque: ${p.stock} unidades`).join("\n")}`;
        
        messages.push({
          role: "system",
          content: productsContext
        });
      }

      // Adicionar hist√≥rico da conversa (√∫ltimas 10 mensagens para n√£o exceder limite)
      const recentHistory = context.conversationHistory.slice(-10);
      recentHistory.forEach(msg => {
        messages.push({
          role: msg.role,
          content: msg.content
        });
      });

      // Adicionar mensagem atual do usu√°rio
      messages.push({
        role: "user",
        content: userMessage
      });

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages,
        max_tokens: 500,
        temperature: 0.7,
        presence_penalty: 0.1,
        frequency_penalty: 0.1,
      });

      return response.choices[0].message.content || "Desculpe, n√£o consegui processar sua mensagem. Posso transferir voc√™ para um de nossos vendedores?";
    } catch (error) {
      console.error("Erro na API OpenAI:", error);
      return "Desculpe, estou com problemas t√©cnicos no momento. Vou transferir voc√™ para um vendedor humano que pode te ajudar melhor! üòä";
    }
  }

  async analyzeIntent(message: string): Promise<{
    intent: 'greeting' | 'product_search' | 'price_inquiry' | 'order' | 'complaint' | 'general_info' | 'transfer_request';
    confidence: number;
    extractedInfo?: {
      productName?: string;
      vehicleBrand?: string;
      vehicleModel?: string;
      vehicleYear?: string;
    };
  }> {
    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Analise a inten√ß√£o do cliente em uma loja de autope√ßas e extraia informa√ß√µes relevantes.

Classifique a inten√ß√£o como:
- greeting: sauda√ß√µes, cumprimentos
- product_search: procurando pe√ßas espec√≠ficas
- price_inquiry: perguntando pre√ßos
- order: quer fazer um pedido
- complaint: reclama√ß√µes ou problemas
- general_info: informa√ß√µes gerais (hor√°rio, endere√ßo, etc)
- transfer_request: quer falar com vendedor humano

Extraia tamb√©m: nome da pe√ßa, marca/modelo/ano do ve√≠culo se mencionados.

Responda em JSON: { "intent": "...", "confidence": 0.0-1.0, "extractedInfo": {...} }`
          },
          {
            role: "user",
            content: message
          }
        ],
        response_format: { type: "json_object" },
        max_tokens: 200,
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      return {
        intent: result.intent || 'general_info',
        confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),
        extractedInfo: result.extractedInfo || {}
      };
    } catch (error) {
      console.error("Erro na an√°lise de inten√ß√£o:", error);
      return {
        intent: 'general_info',
        confidence: 0.3
      };
    }
  }

  async recommendProducts(vehicleInfo: { brand: string; model: string; year: string }, products: any[]): Promise<any[]> {
    try {
      const vehicleContext = `Ve√≠culo: ${vehicleInfo.brand} ${vehicleInfo.model} ${vehicleInfo.year}`;
      const productsContext = products.map(p => 
        `${p.name} - ${p.brand} - Compat√≠vel: ${p.vehicleModel || 'Universal'} - R$ ${p.price}`
      ).join('\n');

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um especialista em autope√ßas. Recomende at√© 5 produtos mais adequados para o ve√≠culo especificado.
            
Considere:
- Compatibilidade com o ve√≠culo
- Itens de manuten√ß√£o preventiva comum
- Pe√ßas que costumam ser trocadas juntas
- Produtos mais vendidos para esse tipo de ve√≠culo

Responda apenas com os nomes dos produtos recomendados, um por linha.`
          },
          {
            role: "user",
            content: `${vehicleContext}\n\nProdutos dispon√≠veis:\n${productsContext}`
          }
        ],
        max_tokens: 300,
      });

      const recommendedNames = response.choices[0].message.content?.split('\n').filter(name => name.trim()) || [];
      
      return products.filter(product => 
        recommendedNames.some(name => 
          product.name.toLowerCase().includes(name.toLowerCase().trim()) ||
          name.toLowerCase().includes(product.name.toLowerCase())
        )
      ).slice(0, 5);
    } catch (error) {
      console.error("Erro nas recomenda√ß√µes:", error);
      return products.slice(0, 5); // Fallback: primeiros 5 produtos
    }
  }
}

export const aiBot = new AIBotService();